#!/usr/bin/php
<?php
$root = dirname(__DIR__);
require_once $root . '/src/helpers.php';

// Use this author slug to query for themes and plugins they've made.
// This is the base of our theme and plugins query.
// As a default we use 'wordpressdotorg' which owns all core themes and plugins.
$query_author = 'wordpressdotorg';

// These plugin and theme slugs are queried from the WordPress API in addition of our author owned.
$extra_plugins = ['akismet', 'bbpress', 'buddypress', 'woocommerce', 'wordpress-importer'];
$extra_themes  = ['twentyseventeen', 'twentynineteen', 'twentytwenty', 'twentytwentyone'];

// Skipped themes and plugins.
$skip_plugins = ['performance-lab'];
$skip_themes  = [];

// Config directory and filenames
$config_dir = $root . '/config';

// Cache directory and filenames
$cache_dir               = $root . '/cache';
$cache_file_versions     = $cache_dir . '/wp-versions.json';
$cache_file_core_themes  = $cache_dir . '/wp-core-themes.json';
$cache_file_core_plugins = $cache_dir . '/wp-core-plugins.json';
$config_languages        = $cache_dir . '/languages-info.json';
$config_packages         = $cache_dir . '/wp-packages.json';

// API Urls
$api_versions = 'https://api.wordpress.org/core/stable-check/1.0/';
$api_core     = 'https://api.wordpress.org/translations/core/1.0/?version=%s';
$api_plugins  = 'https://api.wordpress.org/translations/plugins/1.0/?slug=%s&version=%s';
$api_themes   = 'https://api.wordpress.org/translations/themes/1.0/?slug=%s&version=%s';

// Amounts of WP Core versions,
// plugin translations and theme translations to keep.
$wp_versions_outdated = 30;
$wp_versions_insecure = 30;
$wp_plugin_translations = 50;
$wp_theme_translations = 50;

// How many items per query we should get from the API.
// You probably don't want to change this.
$api_per_page = 250;

// This is the array we save our repositories to.
$packages = [
    'packages' => [
        'wordpress-language'        => [],
        'wordpress-plugin-language' => [],
        'wordpress-theme-language'  => [],
    ],
];

$timestamp = time();

/**
 * Get All Available WordPress Versions
 */
if (should_refresh_cache($cache_file_versions, DEFAULT_CACHE_TIME)) {
    msg('Caching versions: ' . $cache_file_versions);

    // Get available WordPress versions
    try {
        $wp_versions = collect(req($api_versions))
            ->mapToGroups(fn($item, $key) => [$item => $key]);

        // Latest version to get the available languages
        $latest = $wp_versions->get('latest')->first();

        // Versions we still fetch
        $outdated = collect($wp_versions->get('outdated'))
            ->reverse()
            ->take($wp_versions_outdated)
            ->values();

        // Versions we drop from the repository to save time
        $insecure = collect($wp_versions->get('insecure'))
            ->reverse()
            ->take($wp_versions_insecure)
            ->values();

        cache([
            'outdated' => $outdated,
            'insecure' => $insecure,
            'latest'   => $latest,
        ], $cache_file_versions);
    } catch (JsonException $e) {
        error('Versions Error: %s', [$e->getMessage()]);
    }
}

if (! file_exists($cache_file_versions)) {
    error('Could not find: %s', [$cache_file_versions]);
}

/**
 * Get available languages and latest version translations.
 */
if (should_refresh_cache($config_languages, DEFAULT_CACHE_TIME)) {
    msg('Caching languages: ' . $config_languages);

    $wp_versions = get_cached($cache_file_versions);
    $latest      = trim($wp_versions->get('latest'));

    if (empty($latest)) {
        error('Could not get latest version info');
    }

    try {
        $content = req(sprintf($api_core, $latest));
        $content = collect($content);

        $languages = $content
            ->flatten(1)
            ->mapWithKeys(function ($item) {
                $lang = strtolower($item->language ?? '');
                $name = $item->english_name ?? $item->language;

                return [$lang => ['english_name' => $name]];
            })
            ->unique();

        cache($languages, $config_languages);
    } catch (JsonException $e) {
        error('Languages Error: %s', [$e->getMessage()]);
    }
}

/**
 * Get all themes from specified author
 */
if (should_refresh_cache($cache_file_core_themes, DEFAULT_CACHE_TIME)) {
    msg('Caching themes: ' . $cache_file_core_themes);

    try {
        $search_params = query_params([
            'action'                         => 'query_themes',
            'request[fields][versions]'      => 'true',
            'request[fields][rating]'        => 'false',
            'request[fields][downloaded]'    => 'false',
            'request[fields][download_link]' => 'false',
            'request[author]'                => $query_author,
            'request[per_page]'              => $api_per_page,
        ]);

        // Fetch all themes authored by selected username.
        $themes = collect(req('https://api.wordpress.org/themes/info/1.1/?' . $search_params))
            ->get('themes', []);

        $themes = collect($themes);

        // Query rest of the plugins
        if (! empty($extra_themes)) {
            foreach ($extra_themes as $default_theme) {
                $params = query_params([
                    'action'                         => 'theme_information',
                    'request[slug]'                  => $default_theme,
                    'request[fields][versions]'      => 'true',
                    'request[fields][rating]'        => 'false',
                    'request[fields][downloaded]'    => 'false',
                    'request[fields][download_link]' => 'false',
                ]);

                $default_theme_url = sprintf(
                    'https://api.wordpress.org/themes/info/1.1/?%s',
                    $params
                );

                $default_theme_data = collect(req($default_theme_url));

                $themes = $themes->add((object) [
                    'slug'     => $default_theme,
                    'name'     => $default_theme_data->get('name', $default_theme),
                    'versions' => $default_theme_data->get('versions', []),
                ]);
            }
        }

        $themes = collect($themes)
            ->mapWithKeys(function ($theme) {
                return [
                    $theme->slug => [
                        'name'     => $theme->name,
                        'slug'     => $theme->slug,
                        'versions' => $theme->versions,
                    ],
                ];
            });

        cache(['themes' => $themes], $cache_file_core_themes);
    } catch (JsonException $e) {
        msg(vsprintf('Core Themes Error: %s', [$e->getMessage()]));
    }
}

/**
 * Get all plugins from specified author
 */
if (should_refresh_cache($cache_file_core_plugins)) {
    try {
        $plugins_url   = 'https://api.wordpress.org/plugins/info/1.1/?';
        $search_params = query_params([
            'action'            => 'query_plugins',
            'request[author]'   => $query_author,
            'request[per_page]' => $api_per_page,
        ]);

        // Get plugins by our defined author
        $plugins = collect(
            collect(req($plugins_url . $search_params))
                ->get('plugins', [])
        );

        // Query rest of the plugins
        if (! empty($extra_plugins)) {
            foreach ($extra_plugins as $default_plugin) {
                $default_plugin_url = sprintf(
                    'https://api.wordpress.org/plugins/info/1.0/%s.json',
                    $default_plugin
                );

                $default_plugin_data = collect(req($default_plugin_url));

                $plugins = $plugins->add((object) [
                    'slug'     => $default_plugin,
                    'name'     => $default_plugin_data->get('name', $default_plugin),
                    'versions' => $default_plugin_data->get('versions', []),
                ]);
            }
        }

        $plugins = collect($plugins)
            ->map(fn($plugin) => [
                $plugin->slug => [
                    'name'     => $plugin->name,
                    'slug'     => $plugin->slug,
                    'versions' => collect($plugin->versions)
                        ->sortKeysDesc()
                        ->take($wp_plugin_translations)
                        ->toArray(),
                ],
            ]);

        cache(['plugins' => $plugins], $cache_file_core_plugins);
    } catch (JsonException $e) {
        msg(vsprintf('Core Plugins Error: %s', [$e->getMessage()]));
    }
}

/**
 * Now lets process all the collected data starting with WP Core Translations.
 */

$wp_versions = collect(get_cached($cache_file_versions))
    // ->forget( 'insecure' ) // Skip insecure versions.
    ->flatten(1) // Drop all version numbers to same level.
    ->sort() // Sort versions.
    ->toArray();

foreach ($wp_versions as $version) {
    $theme_cache_file_name = $cache_dir . '/wp-' . $version . '.json';

    if (should_refresh_cache($theme_cache_file_name)) {
        msg(sprintf('Caching translations for WP %s', $version));

        try {
            $req = req(sprintf($api_core, $version));
            cache(collect($req), $theme_cache_file_name);
        } catch (\Exception $exception) {
            msg('Error fetching translation: ' . $exception->getMessage());
            continue;
        }
    }

    $data = (object) get_cached($theme_cache_file_name)->toArray();

    if (empty($data->translations)) {
        continue;
    }

    foreach ($data->translations as $translation) {
        $translation = (object) $translation;

        $lang = mb_strtolower($translation->language ?? '');
        $v    = $translation->version ?? '';
        $pkg  = $translation->package ?? '';

        if (empty($lang) || empty($v) || empty($pkg)) {
            continue;
        }

        $packages['packages']['wordpress-language']['core'][$lang][$v] = [
            'dist' => $pkg,
        ];
    }
}

/**
 * Fetch Plugin Translations
 */

$plugins = collect(get_cached($cache_file_core_plugins)->get('plugins', []))
    ->flatten(1)
    ->sortKeys()
    ->values();

foreach ($plugins as $plugin) {
    $plugin = (object) collect($plugin)->toArray();

    if (\in_array($plugin->slug, $skip_plugins, true)) {
        continue;
    }

    if (empty($plugin->versions)) {
        continue;
    }

    // Only keep defined amount of newest plugin versions.
    $plugin->versions = collect($plugin->versions)
        ->sortKeys()
        ->reverse()
        ->take($wp_plugin_translations);

    // Get all translations to all known plugin versions
    foreach ($plugin->versions as $version => $url) {
        $slug = $plugin->slug;

        $plugin_cache_file_name = "$cache_dir/plugin-$slug-$version.json";

        if (should_refresh_cache($plugin_cache_file_name)) {
            msg(sprintf('Caching translations for plugin: %s (%s)', $slug, $version));

            try {
                $req = req(sprintf($api_plugins, $slug, $version));
                cache(
                    collect($req),
                    $plugin_cache_file_name
                );
            } catch (\Exception $exception) {
                msg('Error fetching translation: ' . $exception->getMessage());
                continue;
            }
        }

        $data = (object) get_cached($plugin_cache_file_name)->toArray();

        if (empty($data->translations)) {
            continue;
        }

        foreach ($data->translations as $translation) {
            $translation = (object) $translation;

            $lang = mb_strtolower($translation->language ?? '');
            $v    = $translation->version ?? '';
            $pkg  = $translation->package ?? '';

            if (empty($lang) || empty($v) || empty($pkg)) {
                continue;
            }

            if ($v === 'trunk') {
                $v = 'dev-master';
            }

            $packages['packages']['wordpress-plugin-language'][$slug][$lang][$v] = [
                'dist' => $pkg,
            ];
        }
    }
}

/**
 * Fetch Theme Translations.
 */

$themes = collect(get_cached($cache_file_core_themes)->get('themes', []))
    ->sortKeys()
    ->values();

foreach ($themes as $theme) {
    $theme = (object) $theme;
    $slug  = $theme->slug ?? '';

    if (\in_array($slug, $skip_themes, true)) {
        continue;
    }

    if (empty($theme->versions)) {
        msg('Theme has no versions: ' . $slug);
        continue;
    }

    // Only keep defined amount of latest theme versions.
    $theme->versions = collect($theme->versions)
        ->sortKeys()
        ->reverse()
        ->take($wp_theme_translations);

    foreach ($theme->versions as $theme_version => $theme_version_url) {
        $theme_cache_file_name = "$cache_dir/theme-$slug-$theme_version.json";

        if (should_refresh_cache($theme_cache_file_name)) {
            msg(sprintf('Caching translations for theme %s (%s)', $slug, $theme_version));

            try {
                $req = req(sprintf($api_themes, $slug, $theme_version));
                cache(collect($req), $theme_cache_file_name);
            } catch (\Exception $exception) {
                msg('Error fetching translation: ' . $exception->getMessage());
                continue;
            }
        }

        $data = (object) get_cached($theme_cache_file_name)->toArray();

        if (empty($data->translations)) {
            continue;
        }

        foreach ($data->translations as $translation) {
            $translation = (object) $translation;

            $lang = mb_strtolower($translation->language ?? '');
            $v    = $translation->version ?? '';
            $pkg  = $translation->package ?? '';

            if (empty($lang) || empty($v) || empty($pkg)) {
                continue;
            }

            $packages['packages']['wordpress-theme-language'][$slug][$lang][$v] = [
                'dist' => $pkg,
            ];
        }
    }
}

/**
 * Save collected packages as one JSON file.
 */

try {
    cache($packages, $config_packages);
} catch (JsonException $e) {
    error('Saving wp-packages.json failed: %', [$e->getMessage()]);
}

// This is the scaffolding we use.
$satis_template = $config_dir . '/satis-template.json';
$satis          = get_file($satis_template);

// This is the final satis configuration file
// composer/satis application finally uses to build the repo.
$satis_final = $root . '/satis.json';

// Parts we piece the final output together from.
$packages  = get_file($config_packages);
$languages = get_file($config_languages);

// Shorthand this because line width is finite.
$p = $packages['packages'] ?? [];

$repositories = [];

// Create the initial listing of packages.
foreach ($p as $type => $pkg) {
    $type = get_package_vendor($type);

    foreach ($pkg as $name => $block) {
        foreach ($block as $lang => $versions) {
            $lang_name = $languages[$lang]['english_name'] ?? $lang;

            foreach ($versions as $version => $file) {
                $description    = sprintf(
                    'WordPress %s translations for %s - %s',
                    $name,
                    $lang_name,
                    $lang
                );
                $repositories[] = build_package(
                    $type,
                    $name,
                    $lang,
                    $version,
                    $file['dist'],
                    $description
                );
            }
        }
    }
}

$core = $p['wordpress-language']['core'] ?? [];

// Includes all known themes and plugins by the author specified above.
$components = array_merge(
    array_keys($p['wordpress-plugin-language'] ?? []),
    array_keys($p['wordpress-theme-language'] ?? [])
);

foreach ($core as $language => $versions) {
    $lang_name = $languages[$language]['english_name'] ?? '';

    foreach ($versions as $version => $dist) {
        $required = [
            'koodimonni/composer-dropin-installer' => '>=0.2.3',
        ];

        foreach ($components as $component) {
            // Build up full packages but don't include packages that are not defined in $packages
            if (! empty($p['wordpress-theme-language'][$component][$language] ?? '')) {
                $key              = sprintf('koodimonni-theme-language/%s-%s', $component, $language);
                $required[$key] = '*';
            }

            if (! empty($p['wordpress-plugin-language'][$component][$language] ?? '')) {
                $key              = sprintf('koodimonni-plugin-language/%s-%s', $component, $language);
                $required[$key] = '*';
            }
        }

        $description = sprintf(
            'Full WordPress translation (including themes and core plugins) for %s',
            $language
        );
        if (! empty($lang_name)) {
            $description = sprintf(
                'Full WordPress translation (including themes and core plugins) for %s - %s',
                $lang_name,
                $language
            );
        }

        // Build package and replace key differences with basic package.
        $package = build_package('', '', $language, $version, $dist['dist'], $description);

        $package['package']['name']     = sprintf('koodimonni-language/%s', $language);
        $package['package']['keywords'] = ['WordPress', 'Translation', 'Full-Package', $language, $lang_name];
        $package['package']['require']  = $required;

        $repositories[] = $package;
    }
}

$satis['repositories'] = $repositories;

// Save the satis.json file for the next processing step.
try {
    cache($satis, $satis_final);

    // For debugging
    msg(sprintf('Repository count: %s', count($satis['repositories'])));


    msg(sprintf(
        "Caching took %s",
        time_diff($timestamp, time(), 'minutes')
    ));

    exit(0); // Clean exit we can continue from in the build process.
} catch (JsonException $e) {
    error($e->getMessage());
}
